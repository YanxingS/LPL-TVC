//
//  main.cpp
//  C++ test
//
//  Created by Yanxing Su on 10/3/24.
//
// this search algorithm takes a user defined input and converts to a set of y-z intercept
// and finds the corresponding actuator 1 and 2 length
#include <algorithm>
#include <iostream>
#include <time.h>
#include <stdio.h>
#include <vector>
#include <cmath>

using namespace std;

double time1, timedif;

//const double desired_TV[3*12] = {0.0, 0.0, 100.0, 0.0, 100.0, 0.0, 70.71, 70.71, 0.0, 100.0, 0.0, 0.0, 0.0, 100.0, 0.0, 50.0, 50.0, 86.6, 86.6, 50.0, 50.0, 0.0, 0.0, 100.0, 0.0, 0.0, 100.0, 70.71, 0.0, 70.71, 100.0, 0.0, 0.0, 0.0, 100.0, 50.0};
//-----------------------------------------------------------------------------------------------
    //declaration normalization function

void normalization(double *arr){
    double mag = sqrt(pow(arr[0],2)+pow(arr[1],2)+pow(arr[2],2));
    arr[0] /= mag;
    arr[1] /= mag;
    arr[2] /= mag;
};

//——————————————————————————————————————————————————————————————————————————————
//  The following defines our thrust vector list
//——————————————————————————————————————————————————————————————————————————————

const double TV_list_x[100] = {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1};

const double TV_list_y[100] = {0,0.000404717528451959,0.00159785862007166,0.00351720692513361,0.00606176731605552,0.00909571588203184,0.0124537368239719,0.0159475606992703,0.0193734759686243,0.0225205507335720,0.0251792750881833,0.0271503175368381,0.0282530820499385,0.0283337558210603,0.0272725516055158,0.0249898722874456,0.0214511583492005,0.0166702202145170,0.0107109057493003,0.00368700704344229,-0.00423963170932802,-0.0128627836778495,-0.0219372047559011,-0.0311855552316835,-0.0403066836686090,-0.0489850298073893,-0.0569008612488453,-0.0637410250990204,-0.0692098718344776,-0.0730399952711399,-0.0750024302730005,-0.0749159589580577,-0.0726551965397792,-0.0681571591258882,-0.0614260569856627,-0.0525361068767568,-0.0416322145885405,-0.0289284422573181,-0.0147042423832099,0.000701490176183493,0.0168984277392711,0.0334546933918994,0.0499083685300188,0.0657803179342114,0.0805879777981020,0.0938597137405963,0.105149328550641,0.114050284275051,0.120209200949941,0.123338205106803};

const double TV_list_z[100] = {0,0.00248745183901199,0.00478034512846345,0.00669254598855739,0.00805446359938680,0.00872056625594710,0.00857601915645595,0.00754219737714865,0.00558086519856186,0.00269685778732941,-0.00106084822553995,-0.00559973410859368,-0.0107860102211178,-0.0164485034612318,-0.0223840492997936,-0.0283642238063417,-0.0341432030624407,-0.0394664958483772,-0.0440802618765303,-0.0477409032855201,-0.0502246024838964,-0.0513364753158206,-0.0509190151637874,-0.0488595209192618,-0.0450962293199902,-0.0396229092261587,-0.0324917209348189,-0.0238141962858771,-0.0137602535289013,-0.00255522294194138,0.00952507687423227,0.0221611082393146,0.0349980635936932,0.0476557713171356,0.0597397829707808,0.0708533225230366,0.0806097429889789,0.0886451111381507,0.0946305274515519,0.0982837869483433,0.0993799971157437,0.0977607918549511,0.0933418146269498,0.0861181890116108,0.0761677495100255,0.0636518681441879,0.0488137814927507,0.0319743962800233,0.0135256273771890,-0.00607860215331593};

//-----------------------------------------------------------------------------------------------
    //declaration of y and z intercept table as well as their corresponding actuator 1 and 2 length
const double y_int[169] = {-0.217305201700196,-0.215835589250674,-0.214645476694142,-0.213727382634760,-0.213075603130105,-0.212686124310365,-0.212556561670022,-0.212686124310365,-0.213075603130105,-0.213727382634760,-0.214645476694142,-0.215835589250674,-0.217305201700196,-0.180266230348247,-0.179047108604840,-0.178059846898366,-0.177298239012798,-0.176757553224316,-0.176434459814284,-0.176326980708465,-0.176434459814284,-0.176757553224316,-0.177298239012798,-0.178059846898366,-0.179047108604840,-0.180266230348247,-0.143680600552471,-0.142708903613444,-0.141922009947256,-0.141314972910022,-0.140884021096978,-0.140626500566936,-0.140540834702391,-0.140626500566936,-0.140884021096978,-0.141314972910022,-0.141922009947256,-0.142708903613444,-0.143680600552471,-0.107452326404346,-0.106725637510668,-0.106137154759764,-0.105683178776829,-0.105360889096095,-0.105168300953065,-0.105104235265676,-0.105168300953065,-0.105360889096095,-0.105683178776829,-0.106137154759764,-0.106725637510668,-0.107452326404346,-0.0714890185193435,-0.0710055457317705,-0.0706140227588811,-0.0703119883726807,-0.0700975660914178,-0.0699694354330654,-0.0699268119435104,-0.0699694354330654,-0.0700975660914178,-0.0703119883726807,-0.0706140227588811,-0.0710055457317705,-0.0714890185193435,-0.0357009202553380,-0.0354594786494485,-0.0352639558863338,-0.0351131228526814,-0.0350060424517627,-0.0349420552477019,-0.0349207694917478,-0.0349420552477019,-0.0350060424517627,-0.0351131228526814,-0.0352639558863338,-0.0354594786494485,-0.0357009202553380,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0357009202553380,0.0354594786494485,0.0352639558863338,0.0351131228526814,0.0350060424517627,0.0349420552477019,0.0349207694917478,0.0349420552477019,0.0350060424517627,0.0351131228526814,0.0352639558863338,0.0354594786494485,0.0357009202553380,0.0714890185193435,0.0710055457317705,0.0706140227588811,0.0703119883726807,0.0700975660914178,0.0699694354330654,0.0699268119435104,0.0699694354330654,0.0700975660914178,0.0703119883726807,0.0706140227588811,0.0710055457317705,0.0714890185193435,0.107452326404346,0.106725637510668,0.106137154759764,0.105683178776829,0.105360889096095,0.105168300953065,0.105104235265676,0.105168300953065,0.105360889096095,0.105683178776829,0.106137154759764,0.106725637510668,0.107452326404346,0.143680600552471,0.142708903613444,0.141922009947256,0.141314972910022,0.140884021096978,0.140626500566936,0.140540834702391,0.140626500566936,0.140884021096978,0.141314972910022,0.141922009947256,0.142708903613444,0.143680600552471,0.180266230348247,0.179047108604840,0.178059846898366,0.177298239012798,0.176757553224316,0.176434459814284,0.176326980708465,0.176434459814284,0.176757553224316,0.177298239012798,0.178059846898366,0.179047108604840,0.180266230348247,0.217305201700196,0.215835589250674,0.214645476694142,0.213727382634760,0.213075603130105,0.212686124310365,0.212556561670022,0.212686124310365,0.213075603130105,0.213727382634760,0.214645476694142,0.215835589250674,0.217305201700196};

const double z_int[169] =  {0.212556561670022,0.176326980708465,0.140540834702391,0.105104235265676,0.0699268119435104,0.0349207694917477,0,-0.0349207694917477,-0.0699268119435104,-0.105104235265676,-0.140540834702391,-0.176326980708465,-0.212556561670022,0.212556561670022,0.176326980708465,0.140540834702391,0.105104235265676,0.0699268119435104,0.0349207694917478,0,-0.0349207694917478,-0.0699268119435104,-0.105104235265676,-0.140540834702391,-0.176326980708465,-0.212556561670022,0.212556561670022,0.176326980708465,0.140540834702391,0.105104235265676,0.0699268119435104,0.0349207694917477,0,-0.0349207694917477,-0.0699268119435104,-0.105104235265676,-0.140540834702391,-0.176326980708465,-0.212556561670022,0.212556561670022,0.176326980708465,0.140540834702391,0.105104235265676,0.0699268119435104,0.0349207694917478,0,-0.0349207694917478,-0.0699268119435104,-0.105104235265676,-0.140540834702391,-0.176326980708465,-0.212556561670022,0.212556561670022,0.176326980708465,0.140540834702391,0.105104235265676,0.0699268119435104,0.0349207694917478,0,-0.0349207694917478,-0.0699268119435104,-0.105104235265676,-0.140540834702391,-0.176326980708465,-0.212556561670022,0.212556561670022,0.176326980708465,0.140540834702391,0.105104235265676,0.0699268119435104,0.0349207694917478,0,-0.0349207694917478,-0.0699268119435104,-0.105104235265676,-0.140540834702391,-0.176326980708465,-0.212556561670022,0.212556561670022,0.176326980708465,0.140540834702391,0.105104235265676,0.0699268119435104,0.0349207694917478,0,-0.0349207694917478,-0.0699268119435104,-0.105104235265676,-0.140540834702391,-0.176326980708465,-0.212556561670022,0.212556561670022,0.176326980708465,0.140540834702391,0.105104235265676,0.0699268119435104,0.0349207694917478,0,-0.0349207694917478,-0.0699268119435104,-0.105104235265676,-0.140540834702391,-0.176326980708465,-0.212556561670022,0.212556561670022,0.176326980708465,0.140540834702391,0.105104235265676,0.0699268119435104,0.0349207694917478,0,-0.0349207694917478,-0.0699268119435104,-0.105104235265676,-0.140540834702391,-0.176326980708465,-0.212556561670022,0.212556561670022,0.176326980708465,0.140540834702391,0.105104235265676,0.0699268119435104,0.0349207694917478,0,-0.0349207694917478,-0.0699268119435104,-0.105104235265676,-0.140540834702391,-0.176326980708465,-0.212556561670022,0.212556561670022,0.176326980708465,0.140540834702391,0.105104235265676,0.0699268119435104,0.0349207694917477,0,-0.0349207694917477,-0.0699268119435104,-0.105104235265676,-0.140540834702391,-0.176326980708465,-0.212556561670022,0.212556561670022,0.176326980708465,0.140540834702391,0.105104235265676,0.0699268119435104,0.0349207694917478,0,-0.0349207694917478,-0.0699268119435104,-0.105104235265676,-0.140540834702391,-0.176326980708465,-0.212556561670022,0.212556561670022,0.176326980708465,0.140540834702391,0.105104235265676,0.0699268119435104,0.0349207694917477,0,-0.0349207694917477,-0.0699268119435104,-0.105104235265676,-0.140540834702391,-0.176326980708465,-0.212556561670022};

const double act1_length[169] = {17.4502113909422,17.3343590837835,17.2135288670030,17.0877639589217,16.9571095369738,16.8216127525069,16.6813227476911,16.5362906748053,16.3865697181995,16.2322151192678,16.0732842048119,15.9098364192197,15.7419333609409,17.6215177006736,17.5055388397144,17.3845352809514,17.2585503537812,17.1276293656139,16.9918196167595,16.8511704174278,16.7057331071061,16.5555610766158,16.4007097931802,16.2412368288834,16.0772018929441,15.9086668682824,17.7878012265348,17.6717473148216,17.5506282116425,17.4244874374169,17.2933705142577,17.1573249813157,17.0164004122739,16.8706484352597,16.7201227554772,16.5648791808972,16.4049756513873,16.2404722717079,16.0714313488601,17.9490017322079,17.8329237853980,17.7117463195628,17.5855131206520,17.4542700044162,17.3180648325493,17.1769475310494,17.0309701110690,16.8801866925651,16.7246535310925,16.5644290481293,16.3995738653697,16.2301508434762,18.1050611587844,17.9890097224192,17.8678304841697,17.7415675648218,17.6102671471398,17.4739774931167,17.3327489635366,17.1866340401305,17.0356873506424,16.8799656971602,16.7195280881084,16.5544357743524,16.3847522899152,18.2559236002911,18.1399487649083,18.0188237745388,17.8925931491322,17.7613035065043,17.6250035809723,17.4837442444208,17.3375785300899,17.1865616594126,17.0307510722686,16.8702064610638,16.7049898090988,16.5351654337448,18.4015352823236,18.2856866966066,18.1646714235652,18.0385344418689,17.9073228672910,17.7710859729738,17.6298752122640,17.4837442444208,17.3327489635366,17.1769475310494,17.0164004122739,16.8511704174278,16.6813227476911,18.5418445434320,18.4261714255764,18.3053208053189,18.1793381750282,18.0482712064028,17.9121697725806,17.7710859729738,17.6250741611452,17.4741909760795,17.3184953772432,17.1580486838756,16.9929146190063,16.8231593587548,18.6768018189412,18.5613529664006,18.4407214152007,18.3149532219912,18.1840966676072,18.0482022812049,17.9073228672910,17.7615135359774,17.6108317368264,17.4553372966969,17.2950924620520,17.1301619462386,16.9606129823176,18.8063596269257,18.6911834246839,18.5708248525823,18.4453305779032,18.3147495392424,18.1791329728205,18.0385344418689,17.8930098694318,17.7426175749672,17.5874183151712,17.4274753295031,17.2628543909410,17.0936238625647,18.9304725560869,18.8156169835910,18.6955848056502,18.5704233424572,18.4401822345622,18.3049134714816,18.1646714235652,18.0195128774795,17.8694970757029,17.7146857604725,17.5551432226764,17.3909363562402,17.2221347186204,19.0490972553108,18.9346098921854,18.8149570382032,18.6901867048134,18.5603492744321,18.4254975314363,18.2856866966066,18.1409744653875,17.9914210503732,17.8370892284767,17.6780443932879,17.5143546131879,17.3460906958492,19.1621924247059,19.0481204553610,18.9288993781791,18.8045779304154,18.6752072721155,18.5408410195561,18.4015352823236,18.2573487044100,18.1083425097482,17.9545805526563,17.7961293737116,17.6330582616354,17.4654393218343};

const double act2_length[169] =  {19.1621924247059,19.0481204553610,18.9288993781791,18.8045779304154,18.6752072721155,18.5408410195561,18.4015352823236,18.2573487044100,18.1083425097482,17.9545805526563,17.7961293737116,17.6330582616354,17.4654393218343,19.0490972553108,18.9346098921854,18.8149570382032,18.6901867048134,18.5603492744321,18.4254975314363,18.2856866966066,18.1409744653875,17.9914210503732,17.8370892284767,17.6780443932879,17.5143546131879,17.3460906958492,18.9304725560869,18.8156169835910,18.6955848056502,18.5704233424572,18.4401822345622,18.3049134714816,18.1646714235652,18.0195128774795,17.8694970757029,17.7146857604725,17.5551432226764,17.3909363562402,17.2221347186204,18.8063596269257,18.6911834246839,18.5708248525823,18.4453305779032,18.3147495392424,18.1791329728205,18.0385344418689,17.8930098694318,17.7426175749672,17.5874183151712,17.4274753295031,17.2628543909410,17.0936238625647,18.6768018189412,18.5613529664006,18.4407214152007,18.3149532219912,18.1840966676072,18.0482022812049,17.9073228672910,17.7615135359774,17.6108317368264,17.4553372966969,17.2950924620520,17.1301619462386,16.9606129823176,18.5418445434320,18.4261714255764,18.3053208053189,18.1793381750282,18.0482712064028,17.9121697725806,17.7710859729738,17.6250741611452,17.4741909760795,17.3184953772432,17.1580486838756,16.9929146190063,16.8231593587548,18.4015352823236,18.2856866966066,18.1646714235652,18.0385344418689,17.9073228672910,17.7710859729738,17.6298752122640,17.4837442444208,17.3327489635366,17.1769475310494,17.0164004122739,16.8511704174278,16.6813227476911,18.2559236002911,18.1399487649083,18.0188237745388,17.8925931491322,17.7613035065043,17.6250035809723,17.4837442444208,17.3375785300899,17.1865616594126,17.0307510722686,16.8702064610638,16.7049898090988,16.5351654337448,18.1050611587844,17.9890097224192,17.8678304841697,17.7415675648218,17.6102671471398,17.4739774931167,17.3327489635366,17.1866340401305,17.0356873506424,16.8799656971602,16.7195280881084,16.5544357743524,16.3847522899152,17.9490017322079,17.8329237853980,17.7117463195628,17.5855131206520,17.4542700044162,17.3180648325493,17.1769475310494,17.0309701110690,16.8801866925651,16.7246535310925,16.5644290481293,16.3995738653697,16.2301508434762,17.7878012265348,17.6717473148216,17.5506282116425,17.4244874374169,17.2933705142577,17.1573249813157,17.0164004122739,16.8706484352597,16.7201227554772,16.5648791808972,16.4049756513873,16.2404722717079,16.0714313488601,17.6215177006736,17.5055388397144,17.3845352809514,17.2585503537812,17.1276293656139,16.9918196167595,16.8511704174278,16.7057331071061,16.5555610766158,16.4007097931802,16.2412368288834,16.0772018929441,15.9086668682824,17.4502113909422,17.3343590837835,17.2135288670030,17.0877639589217,16.9571095369738,16.8216127525069,16.6813227476911,16.5362906748053,16.3865697181995,16.2322151192678,16.0732842048119,15.9098364192197,15.7419333609409};

const double z_sections[14] = {0,13,26,39,52,65,78,91,104,117,130,143,156,168};

double find_z_section(int y_int_upper, int y_int_lower){
    
    double middle_value = (double)((y_int_upper+y_int_lower)/2);
    int low_index = 0;
    int high_index = 1;
    
    while(middle_value > z_sections[low_index]){
        
        if((middle_value>z_sections[low_index])&&(middle_value<z_sections[high_index])){
            break;
        }
        else
        low_index  += 1;
        high_index += 1;
    }
    
    return z_sections[low_index];
}

int main(int argc, const char * argv[]) {
//-----------------------------------------------------------------------------------------------
    // user define TV desire in neutral frame
    double current_Tv[3], desire_y_int, desire_z_int;
    
    cout << "enter desired TV in neutral frame (x y z component)\n";
    cin  >> current_Tv[0] >> current_Tv[1] >> current_Tv[2];
    normalization(current_Tv);
    // generate y and z interception base on Dakota's calcution
    desire_y_int = current_Tv[1]/current_Tv[0];
    desire_z_int = current_Tv[2]/current_Tv[0];
    
    
//-----------------------------------------------------------------------------------------------
    //find the min and max for each array avaliable
    
    double  min_y_int = *min_element(y_int, y_int + sizeof(y_int)/sizeof(y_int[0]));
    double  max_y_int = *max_element(y_int, y_int + sizeof(y_int)/sizeof(y_int[0]));
    
    double  min_z_int = *min_element(z_int, z_int + sizeof(z_int)/sizeof(z_int[0]));
    double  max_z_int = *max_element(z_int, z_int + sizeof(z_int)/sizeof(z_int[0]));

    double  min_act1_length = *min_element(act1_length, act1_length + sizeof(act1_length)/sizeof(act1_length[0]));
    double  max_act1_lenght = *max_element(act1_length, act1_length + sizeof(act1_length)/sizeof(act1_length[0]));
    
    double  min_act2_length = *min_element(act2_length, act2_length + sizeof(act2_length)/sizeof(act2_length[0]));
    double  max_act2_length = *max_element(act2_length, act2_length + sizeof(act2_length)/sizeof(act2_length[0]));
    
    printf("the min and max of y_int is %f,%f\n",min_y_int,max_y_int);
    printf("the min and max of z_int is %f,%f\n",min_z_int,max_z_int);
    printf("the min and max actuator1_length is %f,%f\n",min_act1_length,max_act1_lenght);
    printf("the min and max of actuator2_length is %f,%f\n",min_act2_length,max_act2_length);


//-----------------------------------------------------------------------------------------------

    // record starting time
    time1 = (double)clock()/CLOCKS_PER_SEC;

    // calculate run time by taking difference between current and starting time
    
    
//    printf("the value of y_int is %f\n",y_int[1]);
//    printf("the value of z_int is %f\n",z_int[1]);
//    printf("the value of actuator 1 length and actuator 2 lenght is the following %f\n,%f\n",
//           act1_length[1],act2_length[1]);
    
    // from matlab table we can see y intercept steps up every 12
    int loop_count_y = 0;
    int loop_count_z = 0;
    int y_int_lower_index = 0;
    int y_int_upper_index = 13;
    int z_int_lower_index = 0;
    int z_int_upper_index = 0;
    
// -----------------------------------------------------------------------------------------------
    
    // this section loop searches for the section of y-int and records its lower and upper index value
    while (desire_y_int >= y_int[y_int_lower_index]){
        
//        printf("testtttt %d \n ", z_int_lower_index);
       
        //-----------------------------------------------------------------------------------------------
        // when we are below middle section
        //-----------------------------------------------------------------------------------------------
        if(loop_count_y < 6){
            
            if((desire_y_int>=y_int[y_int_lower_index]) && (desire_y_int<y_int[y_int_upper_index])){
                
                //            double test_var = abs(desire_y_int-y_int[y_int_upper_index]);
                z_int_lower_index = (int)(find_z_section(y_int_upper_index, y_int_lower_index));
                z_int_upper_index = z_int_lower_index + 1;
                //            printf("abs(desire_y_int-y_int[y_int_upper_index]) = %f \n", test_var);
                printf("we are below 92\n");
                
                break;
                
                
            }
        }
        //-----------------------------------------------------------------------------------------------
        // when we are above middle section
        //-----------------------------------------------------------------------------------------------
        if(loop_count_y > 6){
            
            if((desire_y_int>=y_int[y_int_lower_index]) && (desire_y_int<y_int[y_int_upper_index])){
                
                y_int_lower_index += 13;
                y_int_upper_index += 13;
                z_int_lower_index = (int)(find_z_section(y_int_upper_index, y_int_lower_index));
                z_int_upper_index = z_int_lower_index + 1;
                //            printf("abs(desire_y_int-y_int[y_int_upper_index]) = %f \n", test_var);
                printf("we are above 92\n");
                
                break;
                
            }
            
        }
        //-----------------------------------------------------------------------------------------------
        // special case : when we are at middle section
        //-----------------------------------------------------------------------------------------------
        if (loop_count_y == 6){
            double small_deviation = 0.001;
            if(((y_int[y_int_upper_index]-small_deviation)<desire_y_int)&& (y_int[y_int_upper_index]+small_deviation)>desire_y_int){
                y_int_lower_index += 13;
                y_int_upper_index += 13;
                z_int_lower_index = (int)(find_z_section(y_int_upper_index, y_int_lower_index));
                z_int_upper_index = z_int_lower_index + 1;
                //            printf("abs(desire_y_int-y_int[y_int_upper_index]) = %f \n", test_var);
                printf("we are above 92\n");
                
                break;
            }
            
            if(((y_int[y_int_lower_index]-small_deviation)<desire_y_int)&& (y_int[y_int_lower_index]+small_deviation)>desire_y_int){
                
                z_int_lower_index = (int)(find_z_section(y_int_upper_index, y_int_lower_index));
                z_int_upper_index = z_int_lower_index + 1;
                printf("we are below 92\n");
                
                break;
            }
        }
        
        y_int_lower_index += 13;
        y_int_upper_index += 13;
        ++loop_count_y;
        printf("from %d to %d and loop count is %d \n",y_int_lower_index,y_int_upper_index,loop_count_y);
        
    }
//----------------------------------128-------------------------------------------------------------
    
    // this section uses the recorded lower and uppder index to search for z-int
    
    while (desire_z_int < z_int[z_int_lower_index]){
        
        if(desire_z_int > z_int[z_int_lower_index+1]){
            printf("not suppose to run this part\n");
            break;
        }
        
        ++z_int_lower_index;
        ++z_int_upper_index;
        ++loop_count_z;
    }
//-----------------------------------------------------------------------------------------------
    
    // interpolation section, now we know the corresponding ranges, we interpolate to get the right actuator lengths for 1 and 2
    
    double act1_position, act2_position;
    
    act1_position = (act1_length[z_int_upper_index] - act1_length[z_int_lower_index])/2+  act1_length[z_int_lower_index];
    act2_position = (act2_length[z_int_upper_index] - act2_length[z_int_lower_index])/2+  act2_length[z_int_lower_index];
    
    timedif = (((double) clock()) / CLOCKS_PER_SEC) - time1;
//-----------------------------------------------------------------------------------------------
    
    //printing seciton, testbench for results
    
    //-----------------------------------------------------------------------------------------------
        // print section for vector -> x-y interception
    printf("current normalized array is %f, %f, %f\n",current_Tv[0],current_Tv[1],current_Tv[2]);
    //-----------------------------------------------------------------------------------------------
        // print section for actuator length look up using y and z interception
    printf("our desire y_int and z_int is %f and %f\n",desire_y_int,desire_z_int);
    printf("our current section is between %d and %d and our loop count is %d \n", y_int_lower_index, y_int_upper_index,loop_count_y);
    printf("lower y_int is %f and upper y_int is %f\n",y_int[y_int_lower_index],y_int[y_int_upper_index]);
    printf("z_int_lower_index, and z_int_upper_index is %d and %d and loop count is %d \n",z_int_lower_index, z_int_upper_index,loop_count_z);
    printf("lower z_int is %f and upper z_int is %f \n",z_int[z_int_lower_index],z_int[z_int_upper_index]);
    printf("resulting lenght of actuator 1 is %f\n with lower and upper values of %f,%f\n",act1_position,act1_length[z_int_lower_index],act1_length[z_int_upper_index]);
    printf("resulting lenght of actuator 2 is %f\n with lower and upper values of %f,%f\n",act2_position,act2_length[z_int_lower_index],act2_length[z_int_upper_index]);

    //print time difference
    printf("run time is %f with clocks persec as %lu\n", timedif,CLOCKS_PER_SEC);
    
    
    printf("smallest and biggest value of act1 is %f and %f\n", min_act1_length,max_act1_lenght);
    printf("smallest and biggest value of act2 is %f and %f\n", min_act2_length,max_act2_length);
//    printf("%f \n",act2_length[13]);
//    printf("%f \n",act1_length[13]);
    
    printf("test %f\n", find_z_section(77, 78));
    printf("%d\n ",z_int_lower_index);
    
    // the following code is Enson's attempt to implement a search function
    return 0;
    
}

//-----------------------------------------------------------------------------------------------
    // returns a specific vector within desired TV
//0.9686, -0.2068, 0.1045



